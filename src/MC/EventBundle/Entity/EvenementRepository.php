<?php

namespace MC\EventBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\Common\Collections;
use FOS\UserBundle;
use FOS\ElasticaBundle\Repository;
use MC\EventBundle\Entity\EvenementSearch;

/**
 * EvenementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EvenementRepository extends EntityRepository
{	
	// Le rôle de cette fonction est de rechercher les évènements n'ayant pas encore débuté et de les classer du plus proche au plus éloigné.
	// Elle affiche $resultatsParPage résultats en commençant par le résultat numéro ($page-1)*$resultatsParPage
	public function findByDebut($page, $resultatsParPage)
	{
  		$listEvenements = $this->createQueryBuilder('evenement')
                           ->Where('evenement.debut > :today')
                           ->setParameter('today', new \DateTime())
                           ->orderBy('evenement.debut', 'ASC')
                           ->setFirstResult( ($page-1)*$resultatsParPage )
                           ->setMaxResults( $resultatsParPage )
  		;

  		return $listEvenements
    		->getQuery()
    		->getResult()
  		;
	}

  // Cette fonction récupère les évènements organisés par les Clubs/Assos auxquels l'utilisateur est abonné
  public function findByCA($page, $resultatsParPage, $myca)
  {
      $myev = new ArrayCollection();
      
      foreach ($myca as $ca){
        $myev = new ArrayCollection( array_merge( $myev->toArray(), $ca->getEvenements()->toArray() ) );
      }

      $listEvenements = $this->createQueryBuilder('evenement')
                            ->Where('$myev->contains(evenement)')
                            ->andWhere('evenement.debut > :today')
                            ->setParameter('today', new \DateTime())
                            ->orderBy('evenement.debut', 'ASC')
                            ->setFirstResult( ($page-1)*$resultatsParPage )
                            ->setMaxResults( $resultatsParPage )
      ;

      return $listEvenements
        ->getQuery()
        ->getResult()
      ;
  }

  public function findByUser($page, $resultatsParPage, $user) {

      $queryBuilder = $this->createQueryBuilder('e')
        ->innerJoin('e.cas', 'ca')
        ->innerJoin('ca.users', 'user')
        ->where('user.id = :user')
        ->setParameter('user', $user->getId())
        ->orderBy('e.debut', 'ASC')
        ->setFirstResult( ($page-1)*$resultatsParPage )
        ->setMaxResults( $resultatsParPage )
      ;

      $query = $queryBuilder->getQuery();

      // var_dump($query->getSQL());

      return $query->getResult();

  }

    public function findByCriteria($dateFrom, $dateTo, $nomEvenement, $nomOrganisateur)
    {   
        $queryBuilder = $this->createQueryBuilder('e')
                            ->where('e.id >= 1')
        ;

        // we create a query to return all the articles
        // but if the criteria nomEvenement is specified, we use it
        if ($nomEvenement != '') {
            $queryBuilder->andWhere('e.nomEvenement = nomEvenement')
                        ->setParameter('nomEvenement', $nomEvenement)
            ;
        }
         

        /*
            Dates filter
            We add this filter only the getIspublished filter is not at "false"
        */
        if(null !== $dateFrom
           && null !== $dateTo)
        {
          $queryBuilder->andWhere('e.debut >= :dateFrom')
                      ->setParameter('dateFrom', $dateFrom)
                      ->andWhere('e.debut <= :dateTo')
                      ->setParameter('dateTo', $dateTo)
          ;
        }

        if(null === $dateFrom
           && null !== $dateTo)
        {
          $queryBuilder->andWhere('e.debut <= :dateTo')
                      ->setParameter('dateTo', $dateTo)
          ;
        }

        if(null !== $dateFrom
           && null === $dateTo)
        {
          $queryBuilder->andWhere('e.debut >= :dateFrom')
                      ->setParameter('dateFrom', $dateFrom)
          ;
        }

        // nomOrganisateur or not filter
        if($nomOrganisateur !=''){
          $queryBuilder->andWhere('e.nomOrganisateur', 'nomOrganisateur')
                        ->setParameter('nomOrganisateur', $nomOrganisateur)
            ;
        }

        $queryBuilder->orderBy('e.debut', 'ASC');
        
        $query = $queryBuilder->getQuery();

        return $query->getResult();
    }  

}
